[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "The sizes that the window can have.  \nThe sizes are expressed as dividend of the entire screen's size.  \nFor example `{2, 3, 3\/2}` means that it can be 1\/2, 1\/3 and 2\/3 of the total\nscreen's size.",
        "stripped_doc" : [
          "The sizes that the window can have.  ",
          "The sizes are expressed as dividend of the entire screen's size.  ",
          "For example `{2, 3, 3\/2}` means that it can be 1\/2, 1\/3 and 2\/3 of the total",
          "screen's size."
        ],
        "parameters" : [

        ],
        "def" : "MiroWindowsManager.sizes",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.sizes",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "The sizes that the window can have.",
        "name" : "sizes"
      },
      {
        "doc" : "The sizes that the window can have in full-screen.  \nThe sizes are expressed as dividend of the entire screen's size.  \nFor example `{1, 4\/3, 2}` means that it can be 1\/1 (hence full screen), 3\/4\nand 1\/2 of the total screen's size",
        "stripped_doc" : [
          "The sizes that the window can have in full-screen.  ",
          "The sizes are expressed as dividend of the entire screen's size.  ",
          "For example `{1, 4\/3, 2}` means that it can be 1\/1 (hence full screen), 3\/4",
          "and 1\/2 of the total screen's size"
        ],
        "parameters" : [

        ],
        "def" : "MiroWindowsManager.fullScreenSizes",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.fullScreenSizes",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "The sizes that the window can have in full-screen.",
        "name" : "fullScreenSizes"
      },
      {
        "doc" : "The screen's grid size.",
        "stripped_doc" : [
          "The screen's grid size."
        ],
        "parameters" : [

        ],
        "def" : "MiroWindowsManager.GRID",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.GRID",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "The screen's grid size.",
        "name" : "GRID"
      },
      {
        "doc" : "If `move`d past the screen edge, jump to next screen?",
        "stripped_doc" : [
          "If `move`d past the screen edge, jump to next screen?"
        ],
        "parameters" : [

        ],
        "def" : "MiroWindowsManager.pushToNextScreen",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.pushToNextScreen",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "If `move`d past the screen edge, jump to next screen?",
        "name" : "pushToNextScreen"
      }
    ],
    "stripped_doc" : [

    ],
    "desc" : "With this Spoon you will be able to move the window in halves and in",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "With this Spoon you will be able to move the window in halves and in\ncorners using your keyboard and mainly using arrows. You would also be able\nto resize them by thirds, quarters, or halves.  \nOfficial homepage for more info and documentation:\n[https:\/\/github.com\/miromannino\/miro-windows-manager](https:\/\/github.com\/miromannino\/miro-windows-manager)\n\nNOTE: This Spoon sets `hs.grid` globals with `hs.grid.setGrid()`,\n`hs.grid.MARGINX`, and `hs.grid.MARGINY`. Changing MiroWindowsManager.GRID\nwill change these globals.\n\nDownload:\nhttps:\/\/github.com\/miromannino\/miro-windows-manager\/raw\/master\/MiroWindowsManager.spoon.zip",
    "Field" : [

    ],
    "Command" : [

    ],
    "items" : [
      {
        "doc" : "The screen's grid size.",
        "stripped_doc" : [
          "The screen's grid size."
        ],
        "parameters" : [

        ],
        "def" : "MiroWindowsManager.GRID",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.GRID",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "The screen's grid size.",
        "name" : "GRID"
      },
      {
        "doc" : "The sizes that the window can have in full-screen.  \nThe sizes are expressed as dividend of the entire screen's size.  \nFor example `{1, 4\/3, 2}` means that it can be 1\/1 (hence full screen), 3\/4\nand 1\/2 of the total screen's size",
        "stripped_doc" : [
          "The sizes that the window can have in full-screen.  ",
          "The sizes are expressed as dividend of the entire screen's size.  ",
          "For example `{1, 4\/3, 2}` means that it can be 1\/1 (hence full screen), 3\/4",
          "and 1\/2 of the total screen's size"
        ],
        "parameters" : [

        ],
        "def" : "MiroWindowsManager.fullScreenSizes",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.fullScreenSizes",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "The sizes that the window can have in full-screen.",
        "name" : "fullScreenSizes"
      },
      {
        "doc" : "If `move`d past the screen edge, jump to next screen?",
        "stripped_doc" : [
          "If `move`d past the screen edge, jump to next screen?"
        ],
        "parameters" : [

        ],
        "def" : "MiroWindowsManager.pushToNextScreen",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.pushToNextScreen",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "If `move`d past the screen edge, jump to next screen?",
        "name" : "pushToNextScreen"
      },
      {
        "doc" : "The sizes that the window can have.  \nThe sizes are expressed as dividend of the entire screen's size.  \nFor example `{2, 3, 3\/2}` means that it can be 1\/2, 1\/3 and 2\/3 of the total\nscreen's size.",
        "stripped_doc" : [
          "The sizes that the window can have.  ",
          "The sizes are expressed as dividend of the entire screen's size.  ",
          "For example `{2, 3, 3\/2}` means that it can be 1\/2, 1\/3 and 2\/3 of the total",
          "screen's size."
        ],
        "parameters" : [

        ],
        "def" : "MiroWindowsManager.sizes",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager.sizes",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "The sizes that the window can have.",
        "name" : "sizes"
      },
      {
        "doc" : "Binds hotkeys for Miro's Windows Manager\n\nParameters:\n * mapping - A table containing hotkey details for the following items:\n  * left: for the left action (usually `{hyper, \"left\"}`)\n  * right: for the right action (usually `{hyper, \"right\"}`)\n  * up: for the up action (usually {hyper, \"up\"})\n  * down: for the down action (usually `{hyper, \"down\"}`)\n  * fullscreen: for the full-screen action (e.g. `{hyper, \"f\"}`)\n\nA configuration example can be:\n``` lua\nlocal mods = {\"ctrl\", \"alt\", \"cmd\"}\nspoon.MiroWindowsManager:bindHotkeys({\n  up          = {mods, \"up\"},\n  down        = {mods, \"down\"},\n  left        = {mods, \"left\"},\n  right       = {mods, \"right\"},\n  fullscreen  = {mods, \"f\"},\n  moveUp      = {{'⌃','⌥'}, \"up\"},\n  moveDown    = {{'⌃','⌥'}, \"down\"},\n  moveLeft    = {{'⌃','⌥'}, \"left\"},\n  moveRight   = {{'⌃','⌥'}, \"right\"},\n  taller      = {{'⌃','⌥','⇧'}, \"down\"},\n  shorter     = {{'⌃','⌥','⇧'}, \"up\"},\n  wider       = {{'⌃','⌥','⇧'}, \"right\"},\n  thinner     = {{'⌃','⌥','⇧'}, \"left\"},\n})\n```",
        "stripped_doc" : [
          "Binds hotkeys for Miro's Windows Manager",
          ""
        ],
        "parameters" : [
          " * mapping - A table containing hotkey details for the following items:",
          "  * left: for the left action (usually `{hyper, \"left\"}`)",
          "  * right: for the right action (usually `{hyper, \"right\"}`)",
          "  * up: for the up action (usually {hyper, \"up\"})",
          "  * down: for the down action (usually `{hyper, \"down\"}`)",
          "  * fullscreen: for the full-screen action (e.g. `{hyper, \"f\"}`)",
          "",
          "A configuration example can be:",
          "``` lua",
          "local mods = {\"ctrl\", \"alt\", \"cmd\"}",
          "spoon.MiroWindowsManager:bindHotkeys({",
          "  up          = {mods, \"up\"},",
          "  down        = {mods, \"down\"},",
          "  left        = {mods, \"left\"},",
          "  right       = {mods, \"right\"},",
          "  fullscreen  = {mods, \"f\"},",
          "  moveUp      = {{'⌃','⌥'}, \"up\"},",
          "  moveDown    = {{'⌃','⌥'}, \"down\"},",
          "  moveLeft    = {{'⌃','⌥'}, \"left\"},",
          "  moveRight   = {{'⌃','⌥'}, \"right\"},",
          "  taller      = {{'⌃','⌥','⇧'}, \"down\"},",
          "  shorter     = {{'⌃','⌥','⇧'}, \"up\"},",
          "  wider       = {{'⌃','⌥','⇧'}, \"right\"},",
          "  thinner     = {{'⌃','⌥','⇧'}, \"left\"},",
          "})",
          "```"
        ],
        "def" : "MiroWindowsManager:bindHotkeys()",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:bindHotkeys()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Binds hotkeys for Miro's Windows Manager",
        "name" : "bindHotkeys"
      },
      {
        "doc" : "Move to screen edge, or cycle to next horizontal or vertical size if already there.  \nTap both directions to go full width \/ height.  \nAlso:  \n  * MiroWindowsManager:goUp()\n  * MiroWindowsManager:goDown()\n  * MiroWindowsManager:goLeft()\n  * MiroWindowsManager:goRight()\n\nParameters:\n * move - up, down, left, right\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Move to screen edge, or cycle to next horizontal or vertical size if already there.  ",
          "Tap both directions to go full width \/ height.  ",
          "Also:  ",
          "  * MiroWindowsManager:goUp()",
          "  * MiroWindowsManager:goDown()",
          "  * MiroWindowsManager:goLeft()",
          "  * MiroWindowsManager:goRight()",
          ""
        ],
        "parameters" : [
          " * move - up, down, left, right",
          ""
        ],
        "def" : "MiroWindowsManager:go(move)",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:go(move)",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Move to screen edge, or cycle to next horizontal or vertical size if already there.",
        "name" : "go"
      },
      {
        "doc" : "Fullscreen, or cycle to next fullscreen option\n\nParameters:\n * None.\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Fullscreen, or cycle to next fullscreen option",
          ""
        ],
        "parameters" : [
          " * None.",
          ""
        ],
        "def" : "MiroWindowsManager:goFullscreen()",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:goFullscreen()",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Fullscreen, or cycle to next fullscreen option",
        "name" : "goFullscreen"
      },
      {
        "doc" : "Grow the frontmost window taller, shorter, wider, thinner.\nAlso:\n  * MiroWindowsManager:taller()\n  * MiroWindowsManager:shorter()\n  * MiroWindowsManager:wider()\n  * MiroWindowsManager:thinner()\n\nParameters:\n * growth - taller, shorter, wider, thinner\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Grow the frontmost window taller, shorter, wider, thinner.",
          "Also:",
          "  * MiroWindowsManager:taller()",
          "  * MiroWindowsManager:shorter()",
          "  * MiroWindowsManager:wider()",
          "  * MiroWindowsManager:thinner()",
          ""
        ],
        "parameters" : [
          " * growth - taller, shorter, wider, thinner",
          ""
        ],
        "def" : "MiroWindowsManager:grow(growth)",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:grow(growth)",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Grow the frontmost window taller, shorter, wider, thinner.",
        "name" : "grow"
      },
      {
        "doc" : "Grow the frontmost window to full width \/ height taller, wider.  \nAlso:\n  * MiroWindowsManager:tallest()\n  * MiroWindowsManager:widest()\n\nParameters:\n * growth - taller, wider\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Grow the frontmost window to full width \/ height taller, wider.  ",
          "Also:",
          "  * MiroWindowsManager:tallest()",
          "  * MiroWindowsManager:widest()",
          ""
        ],
        "parameters" : [
          " * growth - taller, wider",
          ""
        ],
        "def" : "MiroWindowsManager:growFully(growth)",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:growFully(growth)",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Grow the frontmost window to full width \/ height taller, wider.",
        "name" : "growFully"
      },
      {
        "doc" : "LEGACY: Calling this is not required.",
        "stripped_doc" : [
          "LEGACY: Calling this is not required."
        ],
        "parameters" : [

        ],
        "def" : "MiroWindowsManager:init()",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:init()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "LEGACY: Calling this is not required.",
        "name" : "init"
      },
      {
        "doc" : "Move the frontmost window up, down, left, right.  \nAlso:\n  * MiroWindowsManager:moveUp()\n  * MiroWindowsManager:moveDown()\n  * MiroWindowsManager:moveLeft()\n  * MiroWindowsManager:moveRight()\n\nParameters:\n * side - up, down, left, right\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Move the frontmost window up, down, left, right.  ",
          "Also:",
          "  * MiroWindowsManager:moveUp()",
          "  * MiroWindowsManager:moveDown()",
          "  * MiroWindowsManager:moveLeft()",
          "  * MiroWindowsManager:moveRight()",
          ""
        ],
        "parameters" : [
          " * side - up, down, left, right",
          ""
        ],
        "def" : "MiroWindowsManager:move(side)",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:move(side)",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Move the frontmost window up, down, left, right.",
        "name" : "move"
      }
    ],
    "Method" : [
      {
        "doc" : "Move the frontmost window up, down, left, right.  \nAlso:\n  * MiroWindowsManager:moveUp()\n  * MiroWindowsManager:moveDown()\n  * MiroWindowsManager:moveLeft()\n  * MiroWindowsManager:moveRight()\n\nParameters:\n * side - up, down, left, right\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Move the frontmost window up, down, left, right.  ",
          "Also:",
          "  * MiroWindowsManager:moveUp()",
          "  * MiroWindowsManager:moveDown()",
          "  * MiroWindowsManager:moveLeft()",
          "  * MiroWindowsManager:moveRight()",
          ""
        ],
        "parameters" : [
          " * side - up, down, left, right",
          ""
        ],
        "def" : "MiroWindowsManager:move(side)",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:move(side)",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Move the frontmost window up, down, left, right.",
        "name" : "move"
      },
      {
        "doc" : "Grow the frontmost window taller, shorter, wider, thinner.\nAlso:\n  * MiroWindowsManager:taller()\n  * MiroWindowsManager:shorter()\n  * MiroWindowsManager:wider()\n  * MiroWindowsManager:thinner()\n\nParameters:\n * growth - taller, shorter, wider, thinner\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Grow the frontmost window taller, shorter, wider, thinner.",
          "Also:",
          "  * MiroWindowsManager:taller()",
          "  * MiroWindowsManager:shorter()",
          "  * MiroWindowsManager:wider()",
          "  * MiroWindowsManager:thinner()",
          ""
        ],
        "parameters" : [
          " * growth - taller, shorter, wider, thinner",
          ""
        ],
        "def" : "MiroWindowsManager:grow(growth)",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:grow(growth)",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Grow the frontmost window taller, shorter, wider, thinner.",
        "name" : "grow"
      },
      {
        "doc" : "Grow the frontmost window to full width \/ height taller, wider.  \nAlso:\n  * MiroWindowsManager:tallest()\n  * MiroWindowsManager:widest()\n\nParameters:\n * growth - taller, wider\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Grow the frontmost window to full width \/ height taller, wider.  ",
          "Also:",
          "  * MiroWindowsManager:tallest()",
          "  * MiroWindowsManager:widest()",
          ""
        ],
        "parameters" : [
          " * growth - taller, wider",
          ""
        ],
        "def" : "MiroWindowsManager:growFully(growth)",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:growFully(growth)",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Grow the frontmost window to full width \/ height taller, wider.",
        "name" : "growFully"
      },
      {
        "doc" : "Move to screen edge, or cycle to next horizontal or vertical size if already there.  \nTap both directions to go full width \/ height.  \nAlso:  \n  * MiroWindowsManager:goUp()\n  * MiroWindowsManager:goDown()\n  * MiroWindowsManager:goLeft()\n  * MiroWindowsManager:goRight()\n\nParameters:\n * move - up, down, left, right\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Move to screen edge, or cycle to next horizontal or vertical size if already there.  ",
          "Tap both directions to go full width \/ height.  ",
          "Also:  ",
          "  * MiroWindowsManager:goUp()",
          "  * MiroWindowsManager:goDown()",
          "  * MiroWindowsManager:goLeft()",
          "  * MiroWindowsManager:goRight()",
          ""
        ],
        "parameters" : [
          " * move - up, down, left, right",
          ""
        ],
        "def" : "MiroWindowsManager:go(move)",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:go(move)",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Move to screen edge, or cycle to next horizontal or vertical size if already there.",
        "name" : "go"
      },
      {
        "doc" : "Fullscreen, or cycle to next fullscreen option\n\nParameters:\n * None.\n\nReturns:\n * The MiroWindowsManager object",
        "stripped_doc" : [
          "Fullscreen, or cycle to next fullscreen option",
          ""
        ],
        "parameters" : [
          " * None.",
          ""
        ],
        "def" : "MiroWindowsManager:goFullscreen()",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:goFullscreen()",
        "type" : "Method",
        "returns" : [
          " * The MiroWindowsManager object"
        ],
        "desc" : "Fullscreen, or cycle to next fullscreen option",
        "name" : "goFullscreen"
      },
      {
        "doc" : "Binds hotkeys for Miro's Windows Manager\n\nParameters:\n * mapping - A table containing hotkey details for the following items:\n  * left: for the left action (usually `{hyper, \"left\"}`)\n  * right: for the right action (usually `{hyper, \"right\"}`)\n  * up: for the up action (usually {hyper, \"up\"})\n  * down: for the down action (usually `{hyper, \"down\"}`)\n  * fullscreen: for the full-screen action (e.g. `{hyper, \"f\"}`)\n\nA configuration example can be:\n``` lua\nlocal mods = {\"ctrl\", \"alt\", \"cmd\"}\nspoon.MiroWindowsManager:bindHotkeys({\n  up          = {mods, \"up\"},\n  down        = {mods, \"down\"},\n  left        = {mods, \"left\"},\n  right       = {mods, \"right\"},\n  fullscreen  = {mods, \"f\"},\n  moveUp      = {{'⌃','⌥'}, \"up\"},\n  moveDown    = {{'⌃','⌥'}, \"down\"},\n  moveLeft    = {{'⌃','⌥'}, \"left\"},\n  moveRight   = {{'⌃','⌥'}, \"right\"},\n  taller      = {{'⌃','⌥','⇧'}, \"down\"},\n  shorter     = {{'⌃','⌥','⇧'}, \"up\"},\n  wider       = {{'⌃','⌥','⇧'}, \"right\"},\n  thinner     = {{'⌃','⌥','⇧'}, \"left\"},\n})\n```",
        "stripped_doc" : [
          "Binds hotkeys for Miro's Windows Manager",
          ""
        ],
        "parameters" : [
          " * mapping - A table containing hotkey details for the following items:",
          "  * left: for the left action (usually `{hyper, \"left\"}`)",
          "  * right: for the right action (usually `{hyper, \"right\"}`)",
          "  * up: for the up action (usually {hyper, \"up\"})",
          "  * down: for the down action (usually `{hyper, \"down\"}`)",
          "  * fullscreen: for the full-screen action (e.g. `{hyper, \"f\"}`)",
          "",
          "A configuration example can be:",
          "``` lua",
          "local mods = {\"ctrl\", \"alt\", \"cmd\"}",
          "spoon.MiroWindowsManager:bindHotkeys({",
          "  up          = {mods, \"up\"},",
          "  down        = {mods, \"down\"},",
          "  left        = {mods, \"left\"},",
          "  right       = {mods, \"right\"},",
          "  fullscreen  = {mods, \"f\"},",
          "  moveUp      = {{'⌃','⌥'}, \"up\"},",
          "  moveDown    = {{'⌃','⌥'}, \"down\"},",
          "  moveLeft    = {{'⌃','⌥'}, \"left\"},",
          "  moveRight   = {{'⌃','⌥'}, \"right\"},",
          "  taller      = {{'⌃','⌥','⇧'}, \"down\"},",
          "  shorter     = {{'⌃','⌥','⇧'}, \"up\"},",
          "  wider       = {{'⌃','⌥','⇧'}, \"right\"},",
          "  thinner     = {{'⌃','⌥','⇧'}, \"left\"},",
          "})",
          "```"
        ],
        "def" : "MiroWindowsManager:bindHotkeys()",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:bindHotkeys()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Binds hotkeys for Miro's Windows Manager",
        "name" : "bindHotkeys"
      },
      {
        "doc" : "LEGACY: Calling this is not required.",
        "stripped_doc" : [
          "LEGACY: Calling this is not required."
        ],
        "parameters" : [

        ],
        "def" : "MiroWindowsManager:init()",
        "notes" : [

        ],
        "signature" : "MiroWindowsManager:init()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "LEGACY: Calling this is not required.",
        "name" : "init"
      }
    ],
    "name" : "MiroWindowsManager"
  }
]
